import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Formik, Field, Form, FieldArray } from "formik";
import * as Yup from "yup";
import AdminHeader from "../component/AdminHeader";
import axios from "axios";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";

const EditProduct = () => {
  const { id } = useParams();
  const navigate = useNavigate(); 
  const [product, setProduct] = useState(null);
  const [categories, setCategories] = useState([]); 


  useEffect(() => {
    fetchProduct();
    fetchCategories();
  }, []);

  const fetchProduct = async () => {
    try {
      const response = await axios.get(`http://localhost:5000/api/products/products/${id}`);
      setProduct(response.data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m:", error);
    }
  };

  const fetchCategories = async () => {
    try {
      const response = await axios.get("http://localhost:5000/api/categories/categories");
      setCategories(response.data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh m·ª•c:", error);
    }
  };


  const validationSchema = Yup.object({
    title: Yup.string().required("Ti√™u ƒë·ªÅ l√† b·∫Øt bu·ªôc"),
    quantity: Yup.number().required("S·ªë l∆∞·ª£ng l√† b·∫Øt bu·ªôc").min(1, "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0"),
    price: Yup.number().required("Gi√° s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc").min(0, "Gi√° ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0"),
    discount: Yup.number().min(0, "Gi·∫£m gi√° ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0").max(100, "Gi·∫£m gi√° kh√¥ng th·ªÉ v∆∞·ª£t qu√° 100%"),
    category: Yup.string().required("Danh m·ª•c l√† b·∫Øt bu·ªôc"), 
    subtitles: Yup.array().of(Yup.object({ image: Yup.mixed().notRequired() })),
    shipping: Yup.object({ freeShippingThreshold: Yup.string().notRequired() }).notRequired(),
    promotion: Yup.object({ description: Yup.string().notRequired() }).notRequired(),
  });


  const handleSubmit = async (values) => {
    const formData = new FormData();

    formData.append("title", values.title);
    formData.append("quantity", values.quantity);
    formData.append("price", values.price);
    formData.append("discount", values.discount);
    formData.append("category", values.category); 
    formData.append("promotion", JSON.stringify(values.promotion));
    formData.append("shipping", JSON.stringify(values.shipping));

    if (values.mainImage && values.mainImage instanceof File) {
      formData.append("mainImage", values.mainImage);
    }

    values.subtitles.forEach((subtitle) => {
      if (subtitle.image && subtitle.image instanceof File) {
        formData.append("subtitles", subtitle.image);
      }
    });

    console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", Object.fromEntries(formData.entries())); // üõ† Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i

    const token = localStorage.getItem("token");

    try {
      await axios.put(`http://localhost:5000/api/products/update/${id}`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
          Authorization: `Bearer ${token}`,
        },
      });

      alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
      navigate(-1); //  Quay l·∫°i trang tr∆∞·ªõc
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error.response?.data || error.message);
      alert("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m: " + (error.response?.data?.message || error.message));
    }
  };

  if (!product) return <div className="text-center">ƒêang t·∫£i d·ªØ li·ªáu...</div>;

  return (
    <div>
      <AdminHeader />
      <div className="container my-5">
        <h2> Ch·ªânh s·ª≠a s·∫£n ph·∫©m</h2>
        <Formik
          initialValues={{
            title: product.title,
            mainImage: product.mainImage,
            quantity: product.quantity,
            price: product.price,
            discount: product.discount,
            category: product.category || "", 
            subtitles: product.subtitles || [{ image: null }],
            shipping: product.shipping || { freeShippingThreshold: "" },
            promotion: product.promotion || { description: "" },
          }}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
        >
          {({ values, setFieldValue }) => (
            <Form>
              <div className="mb-3">
                <label className="form-label">T√™n s·∫£n ph·∫©m</label>
                <Field type="text" className="form-control" name="title" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ s·∫£n ph·∫©m" />
              </div>

              <div className="mb-3">
                <label className="form-label">Danh m·ª•c</label>
                <Field as="select" className="form-control" name="category">
                  <option value="">Ch·ªçn danh m·ª•c</option>
                  {categories.map((cat) => (
                    <option key={cat._id} value={cat._id}>
                      {cat.name}
                    </option>
                  ))}
                </Field>
              </div>

              <div className="mb-3">
                <label className="form-label">S·ªë l∆∞·ª£ng s·∫£n ph·∫©m</label>
                <Field type="number" className="form-control" name="quantity" placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng s·∫£n ph·∫©m" />
              </div>

              <div className="mb-3">
                <label className="form-label">Gi√° s·∫£n ph·∫©m</label>
                <Field type="number" className="form-control" name="price" placeholder="Nh·∫≠p gi√° s·∫£n ph·∫©m" />
              </div>

              <div className="mb-3">
                <label className="form-label">Gi·∫£m gi√° (%)</label>
                <Field type="number" className="form-control" name="discount" placeholder="Nh·∫≠p gi·∫£m gi√° (%)" />
              </div>

              <div className="mb-3">
                <label className="form-label">·∫¢nh ch√≠nh</label>
                <input type="file" accept="image/*" className="form-control" onChange={(e) => setFieldValue("mainImage", e.target.files[0])} />
                {values.mainImage && typeof values.mainImage === "string" && (
                  <img src={values.mainImage} alt="·∫¢nh hi·ªán t·∫°i" className="img-thumbnail mt-2" style={{ width: "150px" }} />
                )}
              </div>
  <FieldArray name="subtitles">
                {({ push, remove }) => (
                  <div>
                    {values.subtitles.map((subtitle, index) => (
                      <div key={index} className="mb-3 row d-flex flex-wrap">
                        <div className="col-md-4">
                          <input type="file" accept="image/*" onChange={(e) => setFieldValue(`subtitles[${index}].image`, e.target.files[0])} className="form-control" />
                        </div>
                        <div className="col-md-2">
                          <button type="button" className="btn btn-danger" onClick={() => remove(index)}>
                            X√≥a
                          </button>
                        </div>
                      </div>
                    ))}
                    <button type="button" className="btn btn-link" onClick={() => push({ image: null })}>
                      Th√™m ·∫£nh ph·ª•
                    </button>
                  </div>
                )}
              </FieldArray>
              <div className="text-center">
                <button type="submit" className="btn btn-primary">
                  L∆∞u c·∫≠p nh·∫≠t
                </button>
                <button type="button" className="btn btn-secondary ms-2" onClick={() => navigate(-1)}>
                  Quay l·∫°i
                </button>
              </div>
            </Form>
          )}
        </Formik>
      </div>
    </div>
  );
};

export default EditProduct;
